{"version":3,"sources":["networkMgr.js"],"names":["cc","Class","extends","Component","properties","ipconfig","default","type","JsonAsset","requestType","heartCheckTimeGap","_heartCheckFailTime","maxHeartCheckFailTime","retryLayerPrefab","Prefab","onLoad","game","addPersistRootNode","node","startHeartCheck","start","update","unschedule","checkHeart","addRetryLayerToScene","sendMessageToServer","port","url","message","successCallBack","erroCallBack","others","xhr","XMLHttpRequest","onerror","onload","status","open","send","ip","json","self","ontimeout","schedule","canvas","find","retryLayer","instantiate","setPosition","addChild","button","getChildByName","on","retryConnect","director","pause","resume","removePersistRootNode","loadScene"],"mappings":"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","file":"networkMgr.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        \n        ipconfig: {\n            default: null,\n            type: cc.JsonAsset\n        },\n        requestType: {\n            default: null,\n            type: cc.JsonAsset\n        },\n        heartCheckTimeGap: 1,\n        _heartCheckFailTime: 0,\n        maxHeartCheckFailTime: 3,\n        retryLayerPrefab: {\n            default: null,\n            type: cc.Prefab\n        }\n    },\n\n\n    onLoad () {\n        cc.game.addPersistRootNode(this.node);\n        this.startHeartCheck();\n    },\n\n    start () {\n\n    },\n    update(){\n        if (this._heartCheckFailTime == this.maxHeartCheckFailTime) {\n            this._heartCheckFailTime = 0;\n            this.unschedule(this.checkHeart,this);\n            this.addRetryLayerToScene();\n            \n        }\n    },\n    sendMessageToServer(port,url,message,successCallBack,erroCallBack = function(){},others = []) {\n        var xhr = new XMLHttpRequest()\n        xhr.onerror = function() {\n            erroCallBack();\n        }\n        xhr.onload = function(){\n            if (xhr.status == 200) {\n                successCallBack(xhr,others);\n            }\n        }\n        xhr.open(\"POST\",url,true);\n        xhr.send(message);\n    },\n    checkHeart() {\n        var ip = this.ipconfig.json.ip;\n        var port = this.ipconfig.json.port;\n\n        var url = \"http://\" + ip + \":\" + port + \"/heartcheck\";\n\n        var xhr = new XMLHttpRequest();\n        var self = this\n        xhr.onload = function() {\n            if (self._heartCheckFailTime !=  0) {\n                self._heartCheckFailTime = 0;\n            }\n        }\n        xhr.onerror = function() {\n            self._heartCheckFailTime += 1\n            \n        }\n        xhr.ontimeout = function() {\n            self._heartCheckFailTime += 1\n        }\n        xhr.open(\"POST\",url,true);\n        xhr.send(\"heartcheck\");\n    },\n    startHeartCheck() {\n        this.schedule(this.checkHeart,this.heartCheckTimeGap);\n    },\n    addRetryLayerToScene(){\n        var canvas = cc.find(\"Canvas\");\n        var retryLayer = cc.instantiate(this.retryLayerPrefab);\n        retryLayer.setPosition(0,0);\n        canvas.addChild(retryLayer);\n        var button = retryLayer.getChildByName(\"button\")\n        button.on(\"click\",this.retryConnect,this);\n        cc.director.pause();\n        \n    },\n    retryConnect() {\n        cc.director.resume();\n        var node = cc.find(\"networkMgrNode\");\n        cc.game.removePersistRootNode(node);\n        cc.director.loadScene(\"loadingScene\");\n    }\n});\n\n"]}